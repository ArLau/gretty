apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'org.gretty.internal.integrationTests.IntegrationTestPlugin'
apply plugin: 'jacoco'

dependencies {
  implementation 'org.webjars:bootstrap:3.2.0'
  implementation 'org.webjars:jquery:2.1.1'
}

jacoco {
  toolVersion = '+'
}

defineIntegrationTest()

farm {
  webapp project
  webapp ':farmJacoco:MyWebService'

  // farm.afterEvaluate is invoked when farm tasks were already created
  afterEvaluate {

    // one server-side exec-file for all webapps
    tasks.farmBeforeIntegrationTest.jacoco {
      destinationFile = new File(project.buildDir, 'jacoco/farmIntegrationTest_server.exec')
    }

    // one server-side coverage-report for all webapps
    task('farmIntegrationTestServerReport', type: JacocoReport) {

      tasks.farmAfterIntegrationTest.finalizedBy it

      executionData tasks.farmBeforeIntegrationTest

      sourceDirectories.setFrom project.files(project.sourceSets.main.allSource.srcDirs)
      classDirectories.setFrom project.sourceSets.main.output

      // Other webapp projects should be added in execution phase, not configuration phase.
      // So we need to access those projects lazily.
      def webAppProjects = tasks.named("farmBeforeIntegrationTest").map {
        it.webAppProjects.findAll { it != project }
      }
      additionalSourceDirs.from(webAppProjects.map { it.sourceSets.main.allSource.srcDirs })
      additionalClassDirs.from(webAppProjects.map { it.sourceSets.main.output })

      def reportDir = project.reporting.file("jacoco/farmIntegrationTest_server/html")
      reports {
        html.destination = reportDir
      }
      doLast {
        println "Jacoco report for server created: file://${reportDir.toURI().path}"
      }
    }

  } // afterEvaluate
} // farm

// client-side exec-file, not related to gretty
tasks.integrationTest.jacoco {
  destinationFile = new File(project.buildDir, 'jacoco/integrationTest_client.exec')
}

// client-side report, not related to gretty
task('integrationTestClientReport', type: JacocoReport) {

  tasks.integrationTest.finalizedBy it

  executionData tasks.integrationTest

  sourceDirectories.setFrom project.files(project.sourceSets.test.allSource.srcDirs)
  classDirectories.setFrom project.sourceSets.test.output

  def reportDir = project.reporting.file("jacoco/integrationTest_client/html")
  reports {
    html.destination = reportDir
  }
  doLast {
    println "Jacoco report for client created: file://${reportDir.toURI().path}"
  }
}

testAll.dependsOn { farmIntegrationTest }
