plugins {
    id 'java-library'
    id 'groovy'
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.artifactory'
    id 'com.jfrog.bintray'
}

repositories {
    maven {
        url "file:${project.property("privateRepoDir")}"
    }
    jcenter()
}

group = rootProject.group
version = rootProject.version

configurations {
    providedCompile
    api.extendsFrom providedCompile
}

compileGroovy {
    groovyOptions.configurationScript = file("${rootProject.projectDir}/gradle/config.groovy")
}

ext.configurePublications = { String publicationName ->
    String capitalizedPublicationName = publicationName.capitalize()

    def thisProject = project

    // When the maven plugin has been removed, this should be converted to using the API on MavenPublication.pom
    def configurePom = {
        resolveStrategy = Closure.DELEGATE_FIRST
        packaging 'jar'
        description thisProject.description
        url thisProject.project_website

        scm {
            url thisProject.project_scm
            connection thisProject.project_scm
            developerConnection thisProject.project_scm
        }

        licenses {
            license {
                name thisProject.license
                url thisProject.license_url
                distribution 'repo'
            }
        }

        developers {
            developer {
                id thisProject.developerId
                name thisProject.developerName
            }
        }
    }

    publishing {
        publications.named(publicationName, MavenPublication) {
            pom.withXml {
                asNode().children().last() + configurePom
            }
            artifact tasks.sourcesJar
            artifact tasks.javadocJar
        }
    }

    project.task('publishToPrivateRepository') {
        dependsOn "publish${capitalizedPublicationName}PublicationToPrivateRepository"
    }
    project.tasks.build.dependsOn project.tasks.publishToPrivateRepository
    rootProject.tasks.testAllIntegrationTests.dependsOn project.tasks.publishToPrivateRepository

    tasks.artifactoryPublish {
        dependsOn { project.tasks."generatePomFileFor${capitalizedPublicationName}Publication" }
        publications publicationName
    }

    install.repositories.mavenInstaller.pom*.whenConfigured { pom ->
        pom.project {
            name thisProject.name
            configurePom.rehydrate(delegate, owner, thisObject).call()
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates sources jar') {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, description: 'Creates javadoc jar') {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    def groovydocTask = tasks.groovydoc
    dependsOn groovydocTask
    from groovydocTask.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

afterEvaluate {
    dependencies {
        testImplementation libs.groovy_all
        testImplementation libs.spock
    }

    publishing {
        repositories {
            maven {
                name 'private'
                url "file:/${project.rootProject.ext.privateRepoDir}"
            }
        }
    }

    def thisProject = project

    bintray {
        user = project.bintrayUser
        key = project.bintrayKey
        configurations = ['archives']
        pkg {
            repo = thisProject.bintrayRepo
            userOrg = thisProject.bintrayUserOrg
            name = thisProject.bintrayPackage
            desc = thisProject.description
            licenses = [ thisProject.license ]
            vcsUrl = thisProject.project_scm
            labels = thisProject.projectLabels.split(',')
            version {
                name = thisProject.version
                vcsTag = thisProject.version
                gpg {
                    sign = true
                    passphrase = thisProject.gpgPassphrase
                }
            }
        }
        dryRun = thisProject.bintrayDryRun
    }

    tasks.bintrayUpload.dependsOn assemble

    if (!bintrayDryRun && gpgPassphrase) {
        tasks.bintrayUpload.finalizedBy rootProject.tasks.bintraySign
        rootProject.tasks.bintraySign.onlyIf { !tasks.bintrayUpload.getState().getFailure() }
    }

} // afterEvaluate
